image: jakzal/phpqa:php8.1

stages:
    - SecurityChecker
    - CodingStandards
    - UnitTests
    - Eslint
    - Build
    - Deploy

security-checker:
    stage: SecurityChecker
    script:
        - cd back
        - composer install
        - local-php-security-checker  --path=./composer.lock
    allow_failure: false

phpcs:
    stage: CodingStandards
    script:
        - cd back
        - composer install
        - phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src
    allow_failure: false

phpstan:
    stage: CodingStandards
    script:
        - cd back
        - composer install
        - phpstan analyse ./src
    allow_failure: false

eslint:
    image: node:16
    stage: Eslint
    script:
        - cd front
        - npm install
        - npm install eslint
        - npx eslint src/*.js --max-warnings=0
    allow_failure: false

services:
  - mysql:5.7

variables:
  MYSQL_DATABASE: "symfony_test"
  MYSQL_ROOT_PASSWORD: "symfony"
  MYSQL_USER: "symfony"
  MYSQL_PASSWORD: "symfony"
  MYSQL_HOST: mysql

unit-tests:
  stage: UnitTests
  script:
    - apt-get update && apt-get install -y libpq-dev libicu-dev libxml2-dev && docker-php-ext-install pdo pdo_mysql pdo_pgsql intl xml zip
    - cd back
    - composer install
    - php bin/console doctrine:database:create --if-not-exists
    - php bin/console doctrine:schema:update --force --no-interaction
    - php bin/console app:fill-books 200
    # - php bin/console app:fill-user
    - php bin/phpunit
  allow_failure: false

cache:
  paths:
    - front/
    - back/

build_front:
  stage: Build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor --context ./front --dockerfile ./front/Dockerfile --destination sae4-front --tarPath ./front/front.tar --no-push --build-arg BACK_URL="${BACK_URL}" --build-arg BACK_PORT="${BACK_PORT}"
  only:
    - main

build_back:
  stage: Build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor --context ./back --dockerfile ./back/Dockerfile --destination sae4-back --tarPath ./back/back.tar --no-push --build-arg DATABASE_URL="${DATABASE_URL}"
  only:
    - main

deploy:
  stage: Deploy
  image:
    name: docker:stable
    entrypoint: [""]
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $REMOTE_HOST >> ~/.ssh/known_hosts
    - scp -i ~/.ssh/id_rsa ./front/front.tar $REMOTE_HOST:/tmp/front.tar
    - scp -i ~/.ssh/id_rsa ./back/back.tar $REMOTE_HOST:/tmp/back.tar
    - ssh -i ~/.ssh/id_rsa $REMOTE_HOST "docker load -i /tmp/front.tar && docker load -i /tmp/back.tar"
    - ssh -i ~/.ssh/id_rsa $REMOTE_HOST "docker stop sae4-front && docker rm sae4-front && docker stop sae4-back && docker rm sae4-back"
    - ssh -i ~/.ssh/id_rsa $REMOTE_HOST "docker run -d --name sae4-front -p 3000:80 sae4-front"
    - ssh -i ~/.ssh/id_rsa $REMOTE_HOST "docker run -d --name sae4-back -p 8001:8000 sae4-back"
  dependencies:
    - build_front
    - build_back
  only:
    - main
